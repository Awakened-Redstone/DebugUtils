plugins {
    id 'idea'
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

loom {
    runs {
        client {
            vmArgs "-Dmixin.debug.export=true"
        }
    }
    accessWidenerPath.set project(":common").file("src/main/resources/${modid}.accesswidener")
}

configurations {
    shade // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_version_mc}:${rootProject.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    compileOnly project(path: ":common")
}

processResources {
    from project(":common").sourceSets.main.resources
    def ver = project.version.replace("-${project.name}", "")
    inputs.property "version", ver

    filesMatching("fabric.mod.json") {
        expand "version": ver, "homepage": curse_page_fabric, "mcversion": minecraft_version, "fabric_version": fabric_version
    }
    exclude '.cache/**'
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

shadowJar {
    configurations = [project.configurations.shade]
    dependsOn project(":common").shadowJar
    classifier "shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

fullRebuild {
    dependsOn project(":common").fullRebuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact remapSourcesJar
            artifact javadocJar
            artifactId project.modid
            version project.version
        }
    }

    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/21830712/packages/maven"
            //url "https://maven.pkg.github.com/flemmli97/<>"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.gitlab.token") ?: System.getenv("GPR_GITLAB_TOKEN")
                //password = project.findProperty("gpr.github.token") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = findProperty('curseApiToken') ?: 0
    project {
        id = "${curse_id_fabric}"
        "${project.curse_versions}".split(', ').each {
            addGameVersion "${it}"
        }
        addGameVersion "Fabric"
        mainArtifact(remapJar) {
            def txt = rootProject.changelog(1).replace("\n-", "\n\n- ")
            txt = txt + "\n\n" + "For past versions see: ${project.full_changelog}"
            changelog = txt
            changelogType = "markdown"
            releaseType = 'release'
        }
        relations {
            "${project.curse_dep_fabric}".split(', ').each {
                requiredDependency "${it}"
            }
        }
        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }
}